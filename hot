da  tempo  import  sleep_ms
dalla  macchina  importata  I2C , Pin
import  binascii
 struttura di importazione
importare  gc

classe  BHY :
    com_buffer  =  byte ( 9482 )
    # Definizioni di tipo di dati e dimensioni
    BHY_DT_PADDING  = { 'id' : 0 , 'name' : 'Padding' , 'fifo_size' : 1 }
    BHY_DT_QUATERNION  = { 'id' : 1 , 'name' : 'Quaternion+' , 'fifo_size' : 11 }
    BHY_DT_VECTOR_PLUS  = { 'id' : 2 , 'name' : 'Vector+' , 'fifo_size' : 8 }
    BHY_DT_VECTOR_ORIENTATION  = { 'id' : 2 , 'name' : 'Vector+ Orientation' , 'fifo_size' : 8 }
    BHY_DT_VECTOR_UNCALIB  = { 'id' : 3 , 'name' : 'Vettore non calibrato' , 'fifo_size' : 14 }
    BHY_DT_SCALAR  = { 'id' : 4 , 'name' : 'Dati scalari' , 'fifo_size' : 3 }
    BHY_DT_SCALAR_BARO  = { 'id' : 5 , 'name' : 'Dati scalari (barometro)' , 'fifo_size' : 4 }
    BHY_DT_SCALAR_HEART  = { 'id' : 6 , 'name' : 'Dati scalari (frequenza cardiaca)' , 'fifo_size' : 2 }
    BHY_DT_EVENT_DATA  = { 'id' : 7 , 'name' : 'Dati evento' , 'fifo_size' : 2 }
    BHY_DT_ACTIVITY_DATA  = { 'id' : 8 , 'name' : 'Dati attività' , 'fifo_size' : 3 }
    BHY_DT_DEBUG  = { 'id' : 9 , 'name' : 'Debug' , 'fifo_size' : 14 }
    BHY_DT_BSX  = { 'id' : 10 , 'name' : 'BSX Raw Data' , 'fifo_size' : 17 }
    BHY_DT_TIME  = { 'id' : 11 , 'name' : 'Timestamp' , 'fifo_size' : 3 }
    BHY_DT_META  = { 'id' : 12 , 'name' : 'Meta Evento' , 'fifo_size' : 4 }

    # DEFINIZIONE DEL SENSORE VIRTUALE
    VS_TYPE_ACCELEROMETER  =  1
    VS_TYPE_GEOMAGNETIC_FIELD  =  2
    VS_TYPE_ORIENTATION   =  3
    VS_TYPE_GYROSCOPE  =  4
    VS_TYPE_LIGHT  =  5
    VS_TYPE_PRESSURE  =  6
    VS_TYPE_TEMPERATURE  =  7
    VS_TYPE_PROXIMITY  =  8
    VS_TYPE_GRAVITÀ  =  9
    VS_TYPE_LINEAR_ACCELERATION  =  10
    VS_TYPE_ROTATION_VECTOR  =  11
    VS_TYPE_RELATIVE_HUMIDITY  =  12
    VS_TYPE_AMBIENT_TEMPERATURE  =  13
    VS_TYPE_MAGNETIC_FIELD_UNCALIBRATED  =  14
    VS_TYPE_GAME_ROTATION_VECTOR  =  15
    VS_TYPE_GYROSCOPE_UNCALIBRATED  =  16
    VS_TYPE_SIGNIFICANT_MOTION  =  17
    VS_TYPE_STEP_DETECTOR  =  18
    VS_TYPE_STEP_COUNTER   =  19
    VS_TYPE_GEOMAGNETIC_ROTATION_VECTOR  =  20
    VS_TYPE_HEART_RATE  =  21
    VS_TYPE_TILT  =  22
    VS_TYPE_WAKEUP  =  23
    VS_TYPE_GLANCE   =  24
    VS_TYPE_PICKUP  =  25
    # VS_TYPE_ACTIVITY_RECOGNITION = 26 # ???
    VS_TYPE_ACTIVITY_RECOGNITION  =  31

    # Definizioni di eventi
    EV_PADDING  =  0
    EV_DEBUG  =  245
    EV_BSX_C  =  249
    EV_BSX_B  =  250
    EV_BSX_A  =  251

    EV_WAKEUP_TIMESTAMP_LSW  =  246
    EV_WAKEUP_TIMESTAMP_MSW  =  247
    EV_WAKEUP_META_EVENTS  =  248

    EV_TIMESTAMP_LSW  =  252
    EV_TIMESTAMP_MSW  =  253
    EV_META_EVENTI  =  254

    EV_NOT_IMPLEMENTED  =  255

    # Registra le definizioni
    BHY_REG_Buffer_Out  =  0x00  # fino a 0x31
    BHY_REG_FIFO_Flush  =  0x32
    BHY_REG_Chip_Control  =  0x34
    BHY_REG_Int_Status  =  0x36
    BHY_REG_Chip_Status  =  0x37
    BHY_REG_Bytes_Remaining_LSB  =  0x38
    BHY_REG_Bytes_Remaining_MSB  =  0x39
    BHY_REG_PARAMETER_READ_BUFFER_ZERO  =  0x3B
    BHY_REG_PARAMETER_PAGE_SELECT_ADDR  =  0x54
    BHY_REG_Host_Interface_Control  =  0x55
    BHY_REG_PARAMETER_WRITE_BUFFER_ZERO  =  0x5C
    BHY_REG_PARAMETER_REQUEST_ADDR  =  0x64
    BHY_REG_ROM_Version  =  0x70
    BHY_REG_RAM_Version  =  0x72
    BHY_REG_ID_prodotto  =  0x90
    BHY_REG_Revision_ID  =  0x91
    BHY_REG_Upload_Adress  =  0x94
    BHY_REG_Upload_Data  =  0x96
    BHY_REG_Upload_CRC  =  0x97
    BHY_REG_Reset_Request  =  0x9B

    # DEFINIZIONI GLOBALI
    BHY_SYSTEM_PAGE  =  1
    BHY_ALGORITHM_PAGE  =  2
    BHY_SENSORS_PAGE  =  3
    BHY_MAX_SENSOR_ID  =  32
    BHY_SID_WAKEUP_OFFSET  =  32
    BHY_REG_PARAMETER_ACKNOWLEDGE_ADDR  =  0x3A
    BHY_SENSOR_PARAMETER_WRITE  =  0xC0
    BHY_SENSOR_CONFIGURATION_SIZE  =  8
    BHY_PARAMETER_FIFO_CONTROL  =  2

    BHY_PHYSICAL_SENSOR_PRESENT_PARAMETER  =  31
    BHY_PARAM_SYSTEM_PHYSICAL_SENSOR_DETAIL_0  =  32

    BHY_ALGORITHM_STANDBY_REQUEST  = ( 1 << 0 ). to_bytes ( 1 , 'grande' )
    BHY_ABORT_TRANSFER  = ( 1 << 1 ). to_bytes ( 1 , 'grande' )
    BHY_UPDATE_TRANSFER_COUNT  = ( 1 << 2 ). to_bytes ( 1 , 'grande' )
    BHY_WAKEUP_FIFO_HOST_INTERRUPT_DISABLE  = ( 1 << 3 ). to_bytes ( 1 , 'grande' )
    BHY_NED_COORDINATES  = ( 1 << 4 ). to_bytes ( 1 , 'grande' )
    BHY_AP_SUSPENDED  = ( 1 << 5 ). to_bytes ( 1 , 'grande' )
    BHY_REQUEST_SENSOR_SELF_TEST  = ( 1 << 6 ). to_bytes ( 1 , 'grande' )
    BHY_NON_WAKEUP_FIFO_HOST_INTERRUPT_DISABLE  = ( 1 << 7 ). to_bytes ( 1 , 'grande' )

    BHY_CPU_RUN_REQUEST  = ( 1 << 0 ). to_bytes ( 1 , 'grande' )
    BHY_HOST_UPLOAD_ENABLE  = ( 1 << 1 ). to_bytes ( 1 , 'grande' )
    BHY_FIFO_FLUSH_ALL  =  b' \xFF '

    def  __init__ ( self , sda = 22 , scl = 23 , address = 0x28 , int_pin  =  0 , stand_alone  =  False , debug  =  False ):
        sé . i2c  =  I2C ( 1 , sda = Pin ( sda ), scl = Pin ( scl ))

        se  int_pin :
            sé . int_pin  =  Pin ( int_pin )
        altro :
            sé . int_pin  =  0

        sé . BHY_ADDR  =  indirizzo
        sé . fw_file  =  "BHY/fw_bin/"
        se  stand_alone :
            # BHI160B indipendente
            sé . fw_file  +=  "bosch_pcb_7183_di03_bmi160-7183_di03-2-1-11824.fw"
        altro :
            # Integrato con BMM150
            sé . fw_file  +=  "bosch_pcb_7183_di03_bmi160_bmm150-7183_di03-2-1-11824.fw"

        sé . debug  =  debug
        sé . commBuffer  =  bytearray ()

    def  printDebug ( self , msg ):
        se  sé . eseguire il debug :
            stampa ( msg )

    def  bhy_interrupt ( self ):
        fuori  =  int . from_bytes ( self . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_Int_Status , 1 ), 'big' , False ) &  1
        tornare  fuori

    # TODO: magari implementare un sistema per analizzare i dati grezzi in una matrice più leggibile
    def  getRemappingMatrix ( self , sensor_id ):
        ritorno  a se stesso . readParameterPage ( self . BHY_SYSTEM_PAGE , self . BHY_PARAM_SYSTEM_PHYSICAL_SENSOR_DETAIL_0  +  sensor_id , 16 )

    def  setRemappingMatrix ( self , sensor_id , matrice ):
        # Converte la matrice di input in nibble
        buf  =  bytearray ()
        per  i  nell'intervallo  ( 5 ) :
            se  matrice [ i  *  2 ] ==  0 :
                buff  +=  b' \x00 '
            elif  matrice [ i  *  2 ] ==  1 :
                buff  +=  b' \x01 '
            elif  matrice [ i  *  2 ] ==  - 1 :
                buff  +=  b' \x0F '
            altro :
                restituire  Falso

            se ( io  ==  4 ):
                rottura
            se  matrice [ i  *  2  +  1 ] ==  0 :
                passaggio
            elif  matrice [ i  *  2  +  1 ] ==  1 :
                buf [ io ]   =  buf [ io ] |  int . from_bytes ( b' \x10 ' , 'grande' )
            elif  matrice [ i  *  2  +  1 ] ==  - 1 :
                buf [ io ]   =  buf [ io ] |  int . from_bytes ( b' \xF0 ' , 'grande' )
            altro :
                restituire  Falso

        # Scrive effettivamente la configurazione
        ritorno  a se stesso . writeParameterPage ( self . BHY_SYSTEM_PAGE , self . BHY_PARAM_SYSTEM_PHYSICAL_SENSOR_DETAIL_0  +  sensor_id , buf )


    def  dump_Chip_status ( self ):
        fuori  =  ""
        out  +=  " \n \n ---Lettura dello stato del chip--- \n "
        rom_version  =  auto . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_ROM_Version , 2 )
        out  +=  "La versione ROM è: " , binascii . hexlify ( versione_rom )
        product_id  =  auto . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_ID_prodotto , 1 )
        out  +=  "L'ID prodotto è: " , binascii . hexlify ( product_id )
        revision_id  =  self . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_Revision_ID , 1 )
        out  +=  "L'ID revisione è: " , binascii . hexlify ( id_revisione )

        chip_status  =  int . from_bytes ( self . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_Chip_Status , 1 ), 'big' , False )

        if ( stato_chip  &  1 ):
            out  +=  " \t -EEPROM rilevata!"
        if ( stato_chip  &  2 ):
            out  +=  " \t -EEUploadDone!"
        if ( stato_chip  &  4 ):
            out  +=  " \t -EEUploadError!"
        if ( stato_chip  &  8 ):
            out  +=  " \t -Firmware inattivo (interrotto)!"
        if ( stato_chip  &  16 ):
            out  +=  " \t -Nessuna EEPROM!"

        ram_version  =  auto . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_RAM_Version , 4 )
        out  +=  "La versione della RAM è: " , binascii . hexlify ( ram_versione )

        sé . BHY_crc  =  auto . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_Upload_CRC , 4 )
        out  +=  "BHI CRC:" , binascii . hexlify ( self . BHY_crc )
        out  +=  "------------------------ \n "

        tornare  fuori
    # Perdoname madre por mi vida loca
    def  scambio ( self , x ):
        r  =  bytearray ()
        r . aggiungi ( x [ 3 ])
        r . aggiungi ( x [ 2 ])
        r . aggiungi ( x [ 1 ])
        r . aggiungi ( x [ 0 ])
        ritorno  r

    def  upload_BHI160B_RAM ( self ):
        contare  =  0
        mio_crc  =  0

        sé . printDebug ( "Chip control BEFORE RESET is"  +  str ( int . from_bytes ( self . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_Chip_Control , 1 ), 'big' , False ))) # OH GOD BYTES

        # Richiedi a BHI di reimpostare
        sé . printDebug ( "Ripristino del BHI" )
        sé . i2c . writeto_mem ( self . BHY_ADDR , self . BHY_REG_Reset_Request , b' \x01 ' )

        sleep_ms ( 100 ) # TODO: dovremmo aspettare il segnale di interrupt, e non solo aspettare una quantità casuale di ms

        # Imposta il BHI su UploadMode, scrivendo 1 nell'HOST_UPLOAD_ENABLE del Chip Control Register
        sé . i2c . writeto_mem ( self . BHY_ADDR , self . BHY_REG_Chip_Control , self . BHY_HOST_UPLOAD_ENABLE )
        sé . printDebug ( "Il controllo del chip DOPO L'IMPOSTAZIONE/RIPRISTINO è"  +  str ( int . from_bytes ( self . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_Chip_Control , 1 ), 'big' , False ))) # OH GOD BYTES

        # Settina Upload_address punta a 0x0
        sé . printDebug ( "Ripristino della posizione di scrittura dei dati" )
        sé . i2c . writeto_mem ( self . BHY_ADDR , self . BHY_REG_Upload_Adress , b' \x00 ' )
        sé . i2c . writeto_mem ( self . BHY_ADDR , self . BHY_REG_Upload_Adress + 1 , b' \x00 ' )

        f  =  aperto ( self . fw_file , 'rb' )

        intestazione_1  =  f . leggi ( 4 ) # Qualcosa
        fw_crc  =  f . read ( 4 )    # CRC memorizzato all'interno del fw sorgente
        intestazione_2  =  f . leggi ( 4 ) # Qualcosa
        header_3  =  f . leggi ( 4 ) # Qualcosa

        sé . printDebug ( "Caricamento patch RAM" )

        # Loop per leggere e caricare 4 byte alla volta, scambiandoli
        mentre  Vero :
            dati  =  f . leggi ( 4 )
            se  non  dati :
                rottura

            dati  =  sé . swap ( data ) # TODO: dovrei usare bytes() per convertire i dati?
            mio_crc  =  binascii . crc32 ( dati , mio_crc )

            sé . i2c . writeto_mem ( self . BHY_ADDR , self . BHY_REG_Upload_Data , dati ) # OH GOD BYTES
            #sleep_ms(1)
            contare  +=  4

        sé . printDebug ( "Scritto"  +  str ( conteggio ) +  str ( "byte a BHI160B!" ))

        # Aspetta qualche millisecondo - TODO: DOBBIAMO USARE L'INTERRUPT UNA VOLTA CHE LO ABBIAMO
        sonno_ms ( 100 )
        sé . BHY_crc  =  auto . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_Upload_CRC , 4 )

        sé . printDebug ( "CRC memorizzato:"  +  str ( binascii . hexlify ( fw_crc )))
        sé . printDebug ( "BHI CRC:"  +  str ( binascii . hexlify ( self . BHY_crc )))
        sé . printDebug ( "CRC calcolato:"  +  str ( hex ( my_crc )))
        se  sé . BHY_crc  ==  fw_crc :
            sé . printDebug ( " \t Carica CRC corrisponde al CRC memorizzato!" )
            restituisce  Vero

        restituire  Falso
        # TODO: trovare un modo per calcolare il CRC corretto
        # if(self.BHY_crc != mio_crc) :
        # dump_Chip_status()
        # self.printDebug("CARICAMENTO FALLITO! MANCATA CORRISPONDENZA CRC!!! INTERRUZIONE!")

    def  parse_Int_Status ( self ):
        fuori  =  ""
        int_stat  =  int . from_bytes ( self . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_Int_Status , 1 ), 'big' , False )

        se ( int_stat  &  1 ):
            out  +=  " \t -Host Interrupt!"
        se ( int_stat  &  2 ):
            out  +=  " \t -Wakeup Watermark!"
        se ( int_stat  &  4 ):
            out  +=  " \t -Wakeup Latenza!"
        se ( int_stat  &  8 ):
            out  +=  " \t -Risveglio immediato!"
        se ( int_stat  &  16 ):
            out  +=  " \t -Filigrana non riattivata!"
        se ( int_stat  &  32 ):
            out  +=  " \t -Latenza di non risveglio!"
        se ( int_stat  &  64 ):
            out  +=  " \t -Non risveglio immediato!"

        tornare  fuori

    def  flushFifo ( self ):
        sé . i2c . writeto_mem ( self . BHY_ADDR , self . BHY_REG_FIFO_Flush , self . BHY_FIFO_FLUSH_ALL )

    def  pageSelect ( self , pagina , parametro , rw  =  False ):

        # Per prima cosa selezioniamo la pagina
        sé . i2c . writeto_mem ( self . BHY_ADDR , self . BHY_REG_PARAMETER_PAGE_SELECT_ADDR , page . to_bytes ( 1 , 'big' ))

        maschera  =  1  <<  7
        if  not  rw : # Vogliamo leggere
            parametro &= ~ maschera
        else : # Vogliamo scrivere
            parametro |= maschera

        # Quindi richiediamo l'indirizzo particolare
        sé . i2c . writeto_mem ( self . BHY_ADDR , self . BHY_REG_PARAMETER_REQUEST_ADDR , parametro . to_bytes ( 1 , 'big' ))

        # Infine controlliamo ACKNOWLEDGE
        ack  =  0
        for  i  in  range ( 1000 ): # Polling del registro un mucchio di volte... forse meno?
            ack  =  se stesso . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_PARAMETER_ACKNOWLEDGE_ADDR , 1 )

            se  ack  ==  parametro . to_bytes ( 1 , 'big' ): # Fanculo i byte python
                restituisce  Vero
            elif  ack  ==  0x80 : # Perché è importante? Bosh lo usa nell'esempio BHI ...
                sonno_ms ( 50 )
            altro :
                sonno_ms ( 1 )

        return  False  # Errore durante la selezione della pagina

    def  readParameterPage ( self , pagina , parametro , lunghezza  =  8 ):
        sé . printDebug ( "In procinto di LEGGERE"  +  str ( lunghezza ) +  "byte dalla pagina:"  +  str ( pagina ) +  " - parametro:"  +  str ( parametro ))
        # Chiediamo al BHY un particolare parametro in una particolare pagina con condizione READ
        se  sé . pageSelect ( pagina , parametro , rw  =  False ):
            # Ok, abbiamo i dati corretti all'interno del buffer BHY, dobbiamo leggerli!
            ret  =  sé . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_PARAMETER_READ_BUFFER_ZERO , lunghezza )
        else : # Non abbiamo ricevuto l'acck
            sé . printDebug ( "Selezione pagina parametro NON RIUSCITA! Pagina:"  +  str ( pagina ) +  "- Parametro:"  +  str ( parametro ))
            ret  =  0

        # Infine terminiamo la procedura di trasferimento delle caratteristiche scrivendo 0 nel registro Parameter_Request
        sé . i2c . writeto_mem ( self . BHY_ADDR , self . BHY_REG_PARAMETER_REQUEST_ADDR , b' \x00 ' )

        ritorno  ret

    def  writeParameterPage ( self , pagina , parametro , buffer ):
        sé . printDebug ( "Sto per scrivere buf:"  +  str ( buffer ) +  "alla pagina:"  +  str ( pagina ) +  " - parametro:"  +  str ( parametro ))
        # Scrive i dati dal buffer locale al buffer bhy
        sé . i2c . writeto_mem ( self . BHY_ADDR , self . BHY_REG_PARAMETER_WRITE_BUFFER_ZERO , buffer )

        # Impartire l'effettivo comando di scrittura selezionando la pagina di destinazione del buffer
        ret  =  sé . pageSelect ( page , parameter , rw = True ) # Vogliamo scrivere

        # Infine terminiamo la procedura di trasferimento delle caratteristiche scrivendo 0 nel registro Parameter_Request
        sé . i2c . writeto_mem ( self . BHY_ADDR , self . BHY_REG_PARAMETER_REQUEST_ADDR , b' \x00 ' )

        ritorno  ret

    def  getPhysicalSensorPresent ( self ):
        ritorno  a se stesso . readParameterPage ( self . BHY_SYSTEM_PAGE , self . BHY_PHYSICAL_SENSOR_STATUS_PARAMETER , 8 )

    def  configVirtualSensorWithConfig ( self , config ):
        ritorno  a se stesso . configVirtualSensor ( config [ "sensor_id" ],
                                        config [ "wakeup_status" ],
                                        config [ "frequenza_campione" ],
                                        config [ "max_report_latency_ms" ],
                                        config [ "sensore_flush" ],
                                        config [ "cambia_sensibilità" ],
                                        config [ "intervallo_dinamico" ])

    def  configVirtualSensor ( self , sensorId , wakeup , samplingRate , maxReportLatency , flushSensor , changeSensitivity , dynamicRange ):

        # Controlla se l'ID sensore è nel raggio d'azione
        se  sensorId  >=  self . BHY_MAX_SENSOR_ID :
            ritorno  0

        IDEfficace  =  IDSensore
        se  sveglia :
            ID effettivo  +=  self . BHY_SID_WAKEUP_OFFSET

        # TODO: Implementa la procedura FLUSH completa
        # if flushSensor == self.BHY_FIFO_FLUSH_ALL:
        # self.flushFifo()

        # Calcola la pagina param come sensor_id + 0xC0 (scrittura parametro sensore)
        ID effettivo  +=  self . BHY_SENSOR_PARAMETER_WRITE

        # TODO: controlla se queste operazioni sono corrette
        # self.commBuffer.append(samplingRate.to_bytes(2, 'little'))
        # self.commBuffer.append(maxReportLatency.to_bytes(2, 'little'))
        # self.commBuffer.append(changeSensitivity.to_bytes(2, 'little'))
        # self.commBuffer.append(dynamicRange.to_bytes(2, 'little'))
        commBuffer  =  bytearray () # Prepara il file
        commBuffer . aggiungi (( sampleRate ) &  0xFF )
        commBuffer . aggiungi (( frequenza di campionamento  >>  8 ) &  0xFF )
        commBuffer . aggiungi (( maxReportLatency ) &  0xFF )
        commBuffer . aggiungi (( maxReportLatency  >>  8 ) &  0xFF )
        commBuffer . aggiungi (( cambiaSensibilità ) &  0xFF )
        commBuffer . aggiungi (( cambiaSensibilità  >>  8 ) &  0xFF )
        commBuffer . aggiungi (( dynamicRange ) &  0xFF )
        commBuffer . aggiungi (( dynamicRange  >>  8 ) &  0xFF )

        ritorno  a se stesso . writeParameterPage ( self . BHY_SENSORS_PAGE , EffectiveId , CommBuffer )

    def  requestSelfTest ( self ):
        sé . printDebug ( "Richiesta di un autotest" )
        sé . i2c . writeto_mem ( self . BHY_ADDR , self . BHY_REG_Host_Interface_Control , self . BHY_REQUEST_SENSOR_SELF_TEST )

    def  startMainTask ( self ):
        sé . i2c . writeto_mem ( self . BHY_ADDR , self . BHY_REG_Chip_Control , self . BHY_CPU_RUN_REQUEST )

    def  stopMainTask ( self ):
        sé . i2c . writeto_mem ( self . BHY_ADDR , self . BHY_REG_Chip_Control , b' \x00 ' )

    def  setFIFOControl ( self , wakeup_size  =  100 , non_wakeup_size  =  100 ):
        dati  =  struttura . pacchetto ( '<4H' , wakeup_size , 0 , non_wakeup_size , 0 )
        ret  =  sé . writeParameterPage ( pagina = self . BHY_SYSTEM_PAGE , parametro = self . BHY_PARAMETER_FIFO_CONTROL , buffer = dati )
        ritorno  ret

    def  getFIFOControl ( self ):
        dati  =  sé . readParameterPage ( pagina = self . BHY_SYSTEM_PAGE , parametro = self . BHY_PARAMETER_FIFO_CONTROL )
         struttura di ritorno . decomprimere ( '<4H' , dati )

    def  leggiFIFO ( self ):
        # Legge quanti byte possiamo leggere da FIFO
        temp  =  sé . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_Bytes_Remaining_LSB , 2 )
        da_leggere  =  int . from_bytes ( temp , 'little' , False )

        # 9482 Ottenuto leggendo il parametro fifo controlo (PAGINA DI SISTEMA)
        se  per_leggere  >  9482 :
            da_leggere  =  9482

        # TODO: trovare un modo per limitare quanti byte verranno letti dal FIFO
        # Legge i byte disponibili da FIFO
        sé . com_buffer  =  auto . i2c . readfrom_mem ( self . BHY_ADDR , self . BHY_REG_Buffer_Out , to_read )
        ritorno  a se stesso . com_buffer

    # TODO: refactoring di questa funzione per NON utilizzare il buffer locale ma leggere invece l'offset corretto della memoria BHY
    def  parse_fifo ( self , buffer , raw  =  False ):
        fuori  = []
        max_len  =  100
        mentre  Vero :
            se  non  len ( buffer ):
                rottura  

            sensor_id  =  buffer [ 0 ] # Il primo byte di fifo è l'id del sensore dei dati successivi

            se  sensor_id  ==  self . BHY_DT_PADDING :
                rottura

            tipo_dati  =  sé . get_event_dim ( sensor_id ) # Ottiene la dimensione dei dati per quell'output del sensore
            if ( tipo_dati  ==  - 1 ): # Evento sconosciuto
                rottura

            se  crudo :
                fuori . append ([ sensor_id , data_type , buffer [: data_type [ 'fifo_size' ]]])
            else : # L'utente vuole che i dati siano leggibili dall'uomo
                fuori . append ([ sensor_id , data_type , self . cook_data ( data_type , buffer [: data_type [ 'fifo_size' ]])])

            # Slice buffer all'evento successivo
            buffer  =  buffer [ tipo_dati [ 'fifo_size' ]:]

        tornare  fuori

    def  cook_data ( self , tipo , buf ):
        se  tipo  ==  self . BHY_DT_PADDING :
            passaggio
        elif  tipo  ==  self . BHY_DT_QUATERNION :
            ritorno  a se stesso . parseQuaternionPlus ( buf )
        elif  tipo  ==  self . BHY_DT_VECTOR_PLUS :
            ritorno  a se stesso . parseVectorPlus ( buf )
        elif  tipo  ==  self . BHY_DT_VECTOR_ORIENTATION :
            ritorno  a se stesso . parseOrientamento ( buf )
        elif  tipo  ==  self . BHY_DT_VECTOR_UNCALIB :
            ritorno  a se stesso . parseVectorUncalib ( buf )
        elif  tipo  ==  self . BHY_DT_SCALAR :
            ritorno  a se stesso . parseScalare ( buf )
        elif  tipo  ==  self . BHY_DT_SCALAR_BARO :
            ritorno  a se stesso . parseScalarBaro ( buf )
        elif  tipo  ==  self . BHY_DT_SCALAR_HEART :
            ritorno  a se stesso . parseScalarHeart ( buf )
        elif  tipo  ==  self . BHY_DT_DATI_EVENTO :
            ritorno  a se stesso . parseEventData ( buf )
        elif  tipo  ==  self . BHY_DT_ACTIVITY_DATA :
            ritorno  a se stesso . parseActivityRecognitionData ( buf )
        elif  tipo  ==  self . BHY_DT_DEBUG :
            ritorno  a se stesso . parseDebug ( buf )
        elif  tipo  ==  self . BHY_DT_META :
            ritorno  a se stesso . parseMetaEvent ( buf )
        elif  tipo  ==  self . BHY_DT_TIME :
            ritorno  a se stesso . parseTime ( buf )
        altro :
            return { "sensor_id" : - 1 , "data" : "Formato dati sconosciuto" }

    # Analizza l'evento fifo basato sulla tabella 29 del foglio dati
    def  get_event_dim ( self , id ):

        se  id  ==  self . EV_PADDING :
            ritorno  a se stesso . BHY_DT_PADDING

        elif ( id  ==  self . VS_TYPE_ROTATION_VECTOR  o 
              id  ==  sé . VS_TYPE_ROTATION_VECTOR  +  sé . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_GAME_ROTATION_VECTOR  o 
              id  ==  sé . VS_TYPE_GAME_ROTATION_VECTOR  +  auto . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_GEOMAGNETIC_ROTATION_VECTOR  o 
              id  ==  sé . VS_TYPE_GEOMAGNETIC_ROTATION_VECTOR  +  sé . BHY_SID_WAKEUP_OFFSET
             ):
            ritorno  a se stesso . BHY_DT_QUATERNION

        elif ( id  ==  self . VS_TYPE_ACCELEROMETER  o 
              id  ==  sé . VS_TYPE_ACCELEROMETER  +  self . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_GEOMAGNETIC_FIELD  o 
              id  ==  sé . VS_TYPE_GEOMAGNETIC_FIELD  +  sé . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_GYROSCOPE  o 
              id  ==  sé . VS_TYPE_GYROSCOPE  +  auto . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_GRAVITY  o 
              id  ==  sé . VS_TYPE_GRAVITY  +  sé . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_LINEAR_ACCELERATION  o 
              id  ==  sé . VS_TYPE_LINEAR_ACCELERATION  +  sé . BHY_SID_WAKEUP_OFFSET
             ):
            ritorno  a se stesso . BHY_DT_VECTOR_PLUS
        elif ( id  ==  self . VS_TYPE_ORIENTATION  o 
              id  ==  sé . VS_TYPE_ORIENTATION  +  self . BHY_SID_WAKEUP_OFFSET
             ):
             ritorno  a se stesso . BHY_DT_VECTOR_ORIENTATION

        elif ( id  ==  self . VS_TYPE_LIGHT  o 
              id  ==  sé . VS_TYPE_LIGHT  +  self . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_PROXIMITY  o 
              id  ==  sé . VS_TYPE_PROXIMITY  +  self . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_RELATIVE_HUMIDITY  o 
              id  ==  sé . VS_TYPE_RELATIVE_HUMIDITY  +  self . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_STEP_COUNTER  o 
              id  ==  sé . VS_TYPE_STEP_COUNTER  +  sé . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_TEMPERATURE  o 
              id  ==  sé . VS_TYPE_TEMPERATURE  +  self . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_AMBIENT_TEMPERATURE  o 
              id  ==  sé . VS_TYPE_AMBIENT_TEMPERATURE  +  self . BHY_SID_WAKEUP_OFFSET
             ):
             ritorno  a se stesso . BHY_DT_SCALAR

        elif ( id  ==  self . VS_TYPE_PRESSURE  o 
              id  ==  sé . VS_TYPE_PRESSURE  +  self . BHY_SID_WAKEUP_OFFSET
             ):
            ritorno  a se stesso . BHY_DT_SCALAR_BARO

        elif ( id  ==  self . VS_TYPE_SIGNIFICANT_MOTION  o 
              id  ==  sé . VS_TYPE_SIGNIFICANT_MOTION  +  sé . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_SIGNIFICANT_MOTION  o 
              id  ==  sé . VS_TYPE_SIGNIFICANT_MOTION  +  sé . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_STEP_DETECTOR  o
              id  ==  sé . VS_TYPE_STEP_DETECTOR  +  auto . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_TILT  o 
              id  ==  sé . VS_TYPE_TILT  +  sé . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_WAKEUP  o 
              id  ==  sé . VS_TYPE_WAKEUP  +  self . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_GLANCE  o 
              id  ==  sé . VS_TYPE_GLANCE  +  sé . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_PICKUP  o 
              id  ==  sé . VS_TYPE_PICKUP  +  self . BHY_SID_WAKEUP_OFFSET
             ):
            ritorno  a se stesso . BHY_DT_EVENT_DATI

        elif ( id  ==  self . VS_TYPE_MAGNETIC_FIELD_UNCALIBRATED  o 
              id  ==  sé . VS_TYPE_MAGNETIC_FIELD_UNCALIBRATED  +  self . BHY_SID_WAKEUP_OFFSET  o

              id  ==  sé . VS_TYPE_GYROSCOPE_UNCALIBRATED  o 
              id  ==  sé . VS_TYPE_GYROSCOPE_UNCALIBRATED  +  self . BHY_SID_WAKEUP_OFFSET
             ):
             ritorno  a se stesso . BHY_DT_VECTOR_UNCALIB

        elif ( id  ==  self . VS_TYPE_HEART_RATE  o 
              id  ==  sé . VS_TYPE_HEART_RATE  +  auto . BHY_SID_WAKEUP_OFFSET
             ):
             ritorno  a se stesso . BHY_DT_SCALAR_HEART

        elif ( id  ==  self . VS_TYPE_ACTIVITY_RECOGNITION  o 
              id  ==  sé . VS_TYPE_ACTIVITY_RECOGNITION  +  sé . BHY_SID_WAKEUP_OFFSET
             ):
             ritorno  a se stesso . BHY_DT_ACTIVITY_DATI

        elif  id  ==  self . EV_DEBUG :
            ritorno  a se stesso . BHY_DT_DEBUG

        elif ( id  ==  self . EV_BSX_A  o
              id  ==  sé . EV_BSX_B  o
              id  ==  sé . EV_BSX_C
             ):
             ritorno  a se stesso . BHY_DT_BSX

        elif ( id  ==  self . EV_TIMESTAMP_LSW  o 
              id  ==  sé . EV_WAKEUP_TIMESTAMP_LSW  o

              id  ==  sé . EV_TIMESTAMP_MSW  o 
              id  ==  sé . EV_WAKEUP_TIMESTAMP_MSW
             ):
             ritorno  a se stesso . BHY_DT_TIME

        elif ( id  ==  self . EV_META_EVENTS  o 
              id  ==  sé . EV_WAKEUP_META_EVENTS
             ):
             ritorno  a se stesso . BHY_DT_META

        altro :
            return  - 1  # Evento sconosciuto

    def  sensorIdToName ( self , id ):
        se  id  ==  self . VS_TYPE_ACCELEROMETER :
            restituisce  "VS_TYPE_ACCELEROMETER"
        elif  id  ==  self . VS_TYPE_GEOMAGNETIC_FIELD :
            restituisce  "VS_TYPE_GEOMAGNETIC_FIELD"
        elif  id  ==  self . VS_TYPE_ORIENTATION :
            restituisce  "VS_TYPE_ORIENTATION"
        elif  id  ==  self . VS_TYPE_GIROSCOPIO :
            restituisce  "VS_TYPE_GYROSCOPE"
        elif  id  ==  self . VS_TYPE_LIGHT :
            restituisce  "VS_TYPE_LIGHT"
        elif  id  ==  self . VS_TYPE_PRESSURE :
            restituisce  "VS_TYPE_PRESSURE"
        elif  id  ==  self . VS_TYPE_TEMPERATURE :
            restituisce  "VS_TYPE_TEMPERATURE"
        elif  id  ==  self . VS_TYPE_PROXIMITY :
            restituisce  "VS_TYPE_PROXIMITY"
        elif  id  ==  self . VS_TYPE_GRAVITÀ :
            restituisce  "VS_TYPE_GRAVITY"
        elif  id  ==  self . VS_TYPE_LINEAR_ACCELERAZIONE :
            restituisce  "VS_TYPE_LINEAR_ACCELERATION"
        elif  id  ==  self . VS_TYPE_ROTATION_VECTOR :
            restituisce  "VS_TYPE_ROTATION_VECTOR"
        elif  id  ==  self . VS_TYPE_RELATIVE_UMIDITÀ :
            restituisce  "VS_TYPE_RELATIVE_HUMIDITY"
        elif  id  ==  self . VS_TYPE_AMBIENT_TEMPERATURE :
            restituisce  "VS_TYPE_AMBIENT_TEMPERATURE"
        elif  id  ==  self . VS_TYPE_MAGNETIC_FIELD_UNCALIBRATED :
            restituisce  "VS_TYPE_MAGNETIC_FIELD_UNCALIBRATED"
        elif  id  ==  self . VS_TYPE_GAME_ROTATION_VECTOR :
            restituisce  "VS_TYPE_GAME_ROTATION_VECTOR"
        elif  id  ==  self . VS_TYPE_GYROSCOPE_UNCALIBRATED :
            restituisce  "VS_TYPE_GYROSCOPE_UNCALIBRATED"
        elif  id  ==  self . VS_TYPE_SIGNIFICANT_MOTION :
            restituisce  "VS_TYPE_SIGNIFICANT_MOTION"
        elif  id  ==  self . VS_TYPE_STEP_DETECTOR :
            restituisce  "VS_TYPE_STEP_DETECTOR"
        elif  id  ==  self . VS_TYPE_STEP_COUNTER :
            restituisce  "VS_TYPE_STEP_COUNTER"
        elif  id  ==  self . VS_TYPE_GEOMAGNETIC_ROTATION_VECTOR :
            restituisce  "VS_TYPE_GEOMAGNETIC_ROTATION_VECTOR"
        elif  id  ==  self . VS_TYPE_HEART_RATE :
            restituisce  "VS_TYPE_HEART_RATE"
        elif  id  ==  self . VS_TYPE_TILT :
            restituisce  "VS_TYPE_TILT"
        elif  id  ==  self . VS_TYPE_WAKEUP :
            restituisce  "VS_TYPE_WAKEUP"
        elif  id  ==  self . VS_TYPE_GLANCE :
            restituisce  "VS_TYPE_GLANCE"
        elif  id  ==  self . VS_TYPE_PICKUP :
            restituire  "VS_TYPE_PICKUP"
        elif  id  ==  self . VS_TYPE_ACTIVITY_RECOGNITION :
            restituisce  "VS_TYPE_ACTIVITY_RECOGNITION"
        altro :
            return  "Sensori sconosciuti"

    def  parseQuaternionPlus ( self , data ):
        fuori  = {}
        out [ "sensor_id" ], out [ "x" ], out [ "y" ], out [ "z" ], out [ "w" ], out [ "accuracy" ] =  struct . decomprimere ( '<B5h' , dati )
        fuori [ "x" ] /=  16384
        out [ "y" ] /=  16384
        fuori [ "z" ] /=  16384
        fuori [ "w" ] /=  16384
        tornare  fuori

    def  parseOrientation ( self , data ):
        fuori  = {}
        out [ "sensor_id" ], out [ "x" ], out [ "y" ], out [ "z" ], out [ "accuracy" ] =  struct . decomprimere ( '<BH2hB' , dati )
        fuori [ "x" ] *=  360
        fuori [ "x" ] /=  32768
        fuori [ "y" ] *=  360
        out [ "y" ] /=  32768
        fuori [ "z" ] *=  360
        fuori [ "z" ] /=  32768
        tornare  fuori

    def  parseVectorPlus ( self , dati ):
        fuori  = {}
        out [ "sensor_id" ], out [ "x" ], out [ "y" ], out [ "z" ], out [ "accuracy" ] =  struct . decomprimere ( '<B3hB' , dati )
        tornare  fuori

    def  parseVectorUncalib ( self , data ):
        fuori  = {}
        out [ "sensor_id" ], out [ "x" ], out [ "y" ], out [ "z" ], out [ "x_bias" ], out [ "y_bias" ], out [ "z_bias" ], out [ "precisione" ] =  struct . decomprimere ( '<B6hB' , dati )
        tornare  fuori

    def  parseScalar ( self , data ):
        fuori  = {}
        out [ "sensor_id" ], out [ "data" ] =  struct . decomprimere ( '<Bh' , data )
        tornare  fuori

    # TODO: Implementa l'analisi di interi a 24 bit
    def  parseScalarBaro ( self , data ):
        raise  Exception ( "NotImplemented" , "L'analisi dei dati del barometro non è ancora implementata" )

    # TODO: scopri qual è il formato della frequenza cardiaca
    def  parseScalarHeart ( self , data ):
        raise  Exception ( "NotImplemented" , "L'analisi dei dati sulla frequenza cardiaca non è ancora stata implementata" )

    def  parseEventData ( self , dati ):
        fuori  = {}
        out [ "sensor_id" ] =  struct . decomprimere ( '<B' , dati )[ 0 ]
        tornare  fuori

    def  parseActivityRecognitionData ( self , data ):
        fuori  = {}
        lista  = []
        out [ "sensor_id" ], attività  =  struct . decomprimere ( '>BH' , dati )
        # TODO: ho scambiato l'aggettivo "iniziato" e "finito".. non so perché
        if ( attività  & ( 1 << 0 )):
            elenco . append ( "Attività ancora avviata" )
        if ( attività  & ( 1 << 1 )):
            elenco . append ( "Attività di camminata iniziata" )
        if ( attività  & ( 1 << 2 )):
            elenco . append ( "Attività in esecuzione avviata" )
        if ( attività  & ( 1 << 3 )):
            elenco . append ( "Attività On Bicycle avviata" )
        if ( attività  & ( 1 << 4 )):
            elenco . append ( "In Veicolo attività avviata" )
        if ( attività  & ( 1 << 5 )):
            elenco . append ( "Attività di inclinazione iniziata" )
        if ( attività  & ( 1 << 6 )):
            elenco . append ( "Riservato (6)" )
        if ( attività  & ( 1 << 7 )):
            elenco . append ( "Riservato (7)" )
        if ( attività  & ( 1 << 8 )):
            elenco . append ( "Ancora attività terminata" )
        if ( attività  & ( 1 << 9 )):
            elenco . append ( "Attività di deambulazione terminata" )
        if ( attività  & ( 1 << 10 )):
            elenco . append ( "Attività in esecuzione terminata" )
        if ( attività  & ( 1 << 11 )):
            elenco . append ( "Attività On Bicycle terminata" )
        if ( attività  & ( 1 << 12 )):
            elenco . append ( "Attività nel veicolo terminata" )
        if ( attività  & ( 1 << 13 )):
            elenco . append ( "Attività di ribaltamento terminata" )
        if ( attività  & ( 1 << 14 )):
            elenco . append ( "Riservato (14)" )
        if ( attività  & ( 1 << 15 )):
            elenco . append ( "Riservato (15)" )

        out [ "elenco_attività" ] =  elenco 
        tornare  fuori

    def  parseDebug ( self , dati ):
        raise  Exception ( "NotImplemented" , "L'analisi dei dati di debug non è ancora implementata" )

    def  parseTime ( self , data ):
        fuori  = {}
        out [ "sensor_id" ], out [ 'timestamp' ] =  struct . decomprimere ( '<Bh' , data )
        tornare  fuori

    def  parseMetaEvent ( self , dati ):
        se  len ( dati ) !=  4 :
            return  "Evento malformato" , ""

        se  dati [ 0 ] !=  self . EV_META_EVENTS  e  data [ 0 ] !=  self . EV_WAKEUP_META_EVENTI :
            return  "Non è un Meta Evento!" , ""

        se  dati [ 1 ] ==  0 :
            return  "Non utilizzato" , ""
         dati elif [ 1 ] ==  1 :
            return  "Flush Completed" , "Sensor Type:" + str ( data [ 2 :])
         dati elif [ 1 ] ==  4 :
            return  "Errore" , "Registro errore:" + str ( data [ 2 :])
         dati elif [ 1 ] ==  11 :
            return  "Errore sensore" , ""
         dati elif [ 1 ] ==  15 :
            info  =  "Risultati dell'autotest"
            desc  =  "Tipo di sensore: "
            se  dati [ 2 ] ==  1 :
                desc  +=  "ID accelerometro 1"
             dati elif [ 2 ] ==  16 :
                desc  +=  "ID giroscopio non calibrato 16"
             dati elif [ 2 ] ==  14 :
                desc  +=  "ID magnetometro non calibrato 14"

            desc  +=  " - STATO: "

            se  dati [ 3 ] ==  0 :
                desc  +=  "Test SUPERATO"
            altro :
                desc  +=  "Test FALLITO - "  +  str ( data [ 3 ])

             informazioni di ritorno , desc
         dati elif [ 1 ] ==  16 :
            return  "Inizialized" , "RAM Ver LSB:" + str ( binascii . hexlify ( data [ 2 :]))
